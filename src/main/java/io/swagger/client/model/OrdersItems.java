/*
 * LIO - Order Management API
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.joda.time.DateTime;

/**
 * OrdersItems
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-07-28T14:20:55.281Z")
public class OrdersItems {
  @SerializedName("sku")
  private String sku = null;

  @SerializedName("skuType")
  private String skuType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("unit_price")
  private Integer unitPrice = null;

  @SerializedName("quantity")
  private Integer quantity = null;

  /**
   * Unidade de medida.
   */
  @JsonAdapter(UnitOfMeasureEnum.Adapter.class)
  public enum UnitOfMeasureEnum {
    EACH("EACH"),
    
    HOURS("HOURS"),
    
    DAYS("DAYS"),
    
    SECONDS("SECONDS"),
    
    CRATE_OF_12("CRATE_OF_12"),
    
    SIX_PACK("SIX_PACK"),
    
    GALLON("GALLON"),
    
    LITRE("LITRE");

    private String value;

    UnitOfMeasureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitOfMeasureEnum fromValue(String text) {
      for (UnitOfMeasureEnum b : UnitOfMeasureEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UnitOfMeasureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitOfMeasureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitOfMeasureEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UnitOfMeasureEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("unit_of_measure")
  private UnitOfMeasureEnum unitOfMeasure = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("created_at")
  private DateTime createdAt = null;

  @SerializedName("updated_at")
  private DateTime updatedAt = null;

  public OrdersItems sku(String sku) {
    this.sku = sku;
    return this;
  }

   /**
   * SKU do produto - identificação única do produto, preferencialmente usando identificações do mercado para o produto, como: &lt;br&gt; - Universal Product Code (UPC),&lt;br&gt; - International Article Number (EAN),&lt;br&gt; - Global Trade Item Number (GTIN),&lt;br&gt; - Australian Product Number (APN),&lt;br&gt; - Outros.&lt;br&gt; Caso seu produto não tenha uma identificação global, utilize informe um ID único proprietário para esse produto.
   * @return sku
  **/
  @ApiModelProperty(required = true, value = "SKU do produto - identificação única do produto, preferencialmente usando identificações do mercado para o produto, como: <br> - Universal Product Code (UPC),<br> - International Article Number (EAN),<br> - Global Trade Item Number (GTIN),<br> - Australian Product Number (APN),<br> - Outros.<br> Caso seu produto não tenha uma identificação global, utilize informe um ID único proprietário para esse produto.")
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }

  public OrdersItems skuType(String skuType) {
    this.skuType = skuType;
    return this;
  }

   /**
   * Tipo de SKU informado, por exemplo:&lt;br&gt; - PTY - para proprietário - ou seja, quando o SKU for sua identificação proprietária.&lt;br&gt; - UPC - Universal Product Code.&lt;br&gt; - EAN - International Article Number.&lt;br&gt; - GTIN - Global Trade Item Number.&lt;br&gt; - APN - Australian Product Number.
   * @return skuType
  **/
  @ApiModelProperty(required = true, value = "Tipo de SKU informado, por exemplo:<br> - PTY - para proprietário - ou seja, quando o SKU for sua identificação proprietária.<br> - UPC - Universal Product Code.<br> - EAN - International Article Number.<br> - GTIN - Global Trade Item Number.<br> - APN - Australian Product Number.")
  public String getSkuType() {
    return skuType;
  }

  public void setSkuType(String skuType) {
    this.skuType = skuType;
  }

  public OrdersItems name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nome do produto.
   * @return name
  **/
  @ApiModelProperty(value = "Nome do produto.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OrdersItems description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Descrição do produto.
   * @return description
  **/
  @ApiModelProperty(value = "Descrição do produto.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public OrdersItems unitPrice(Integer unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Valor unitário do produto. Exemplo: O valor de R$ 10,00 é representado como 1000.
   * @return unitPrice
  **/
  @ApiModelProperty(required = true, value = "Valor unitário do produto. Exemplo: O valor de R$ 10,00 é representado como 1000.")
  public Integer getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Integer unitPrice) {
    this.unitPrice = unitPrice;
  }

  public OrdersItems quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantidade de itens. Caso não seja informado será considerado o valor 1.
   * @return quantity
  **/
  @ApiModelProperty(value = "Quantidade de itens. Caso não seja informado será considerado o valor 1.")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public OrdersItems unitOfMeasure(UnitOfMeasureEnum unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

   /**
   * Unidade de medida.
   * @return unitOfMeasure
  **/
  @ApiModelProperty(required = true, value = "Unidade de medida.")
  public UnitOfMeasureEnum getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(UnitOfMeasureEnum unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }

  public OrdersItems details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Detalhes do produto.
   * @return details
  **/
  @ApiModelProperty(value = "Detalhes do produto.")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public OrdersItems createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Data da criação/inclusão do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
   * @return createdAt
  **/
  @ApiModelProperty(required = true, value = "Data da criação/inclusão do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public OrdersItems updatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Data da última atualização do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
   * @return updatedAt
  **/
  @ApiModelProperty(required = true, value = "Data da última atualização do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersItems ordersItems = (OrdersItems) o;
    return Objects.equals(this.sku, ordersItems.sku) &&
        Objects.equals(this.skuType, ordersItems.skuType) &&
        Objects.equals(this.name, ordersItems.name) &&
        Objects.equals(this.description, ordersItems.description) &&
        Objects.equals(this.unitPrice, ordersItems.unitPrice) &&
        Objects.equals(this.quantity, ordersItems.quantity) &&
        Objects.equals(this.unitOfMeasure, ordersItems.unitOfMeasure) &&
        Objects.equals(this.details, ordersItems.details) &&
        Objects.equals(this.createdAt, ordersItems.createdAt) &&
        Objects.equals(this.updatedAt, ordersItems.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sku, skuType, name, description, unitPrice, quantity, unitOfMeasure, details, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersItems {\n");
    
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    skuType: ").append(toIndentedString(skuType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

