/*
 * LIO - Order Management API
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Informações sobre o cartão utilizado na transação.
 */
@ApiModel(description = "Informações sobre o cartão utilizado na transação.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-07-28T14:20:55.281Z")
public class OrdersCard {
  /**
   * Bandeira do cartão.
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    VISA("VISA"),
    
    MASTERCARD("MASTERCARD"),
    
    ELO("ELO"),
    
    DINERS("DINERS"),
    
    AMEX("AMEX"),
    
    AURA("AURA");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String text) {
      for (BrandEnum b : BrandEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BrandEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("brand")
  private BrandEnum brand = null;

  @SerializedName("bin")
  private Integer bin = null;

  @SerializedName("last")
  private Integer last = null;

  public OrdersCard brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

   /**
   * Bandeira do cartão.
   * @return brand
  **/
  @ApiModelProperty(required = true, value = "Bandeira do cartão.")
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }

  public OrdersCard bin(Integer bin) {
    this.bin = bin;
    return this;
  }

   /**
   * Bin (primeiros 6 dígitos) do cartão.
   * @return bin
  **/
  @ApiModelProperty(required = true, value = "Bin (primeiros 6 dígitos) do cartão.")
  public Integer getBin() {
    return bin;
  }

  public void setBin(Integer bin) {
    this.bin = bin;
  }

  public OrdersCard last(Integer last) {
    this.last = last;
    return this;
  }

   /**
   * Last (últimos 4 dígitos) do cartão.
   * @return last
  **/
  @ApiModelProperty(required = true, value = "Last (últimos 4 dígitos) do cartão.")
  public Integer getLast() {
    return last;
  }

  public void setLast(Integer last) {
    this.last = last;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersCard ordersCard = (OrdersCard) o;
    return Objects.equals(this.brand, ordersCard.brand) &&
        Objects.equals(this.bin, ordersCard.bin) &&
        Objects.equals(this.last, ordersCard.last);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, bin, last);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersCard {\n");
    
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

